:numbered:
[[credentials_credentials_endpoint]]
== _Credentials_ module

*Module Identifier: `credentials`*

The credentials module is used to exchange the credentials token that has to be used by parties for authorization of requests.

Every OCPI request is required to contain a credentials token in the <<transport_and_format.asciidoc#transport_and_format_authorization_header,HTTP Authorization header>>.



[[credentials_interfaces_and_endpoints]]
=== Interfaces and endpoints

Example: `/ocpi/cpo/2.2/credentials` and `/ocpi/emsp/2.2/credentials`

[cols="2,12",options="header"]
|===
|Method |Description 

|<<credentials_get_method,GET>> |Retrieves the credentials object to access the server's platform. 
|<<credentials_post_method,POST>> |Provides the server with a credentials object to access the client's system (i.e. register). 
|<<credentials_put_method,PUT>> |Provides the server with an updated credentials object to access the client's system. 
|PATCH |n/a 
|<<credentials_delete_method,DELETE>> |Informs the server that its credentials to the client's system are now invalid (i.e. unregister). 
|===

[[credentials_get_method]]
==== *GET* Method

Retrieves the credentials object to access the server's platform. The request body is empty, the response contains the credentials object to access the server's platform. This credentials object also contains extra information about the server such as its business details.

[[credentials_post_method]]
==== *POST* Method

Provides the server with credentials to access the client's system. This credentials object also contains extra information about the client such as its business details.

A `POST` initiates the registration process for this endpoint's version. The server must also fetch the client's endpoints for this version.

If successful, the server must generate a new credentials token and respond with the client's new credentials to access the server's system. The credentials object in the response also contains extra information about the server such as its business details.

This method MUST return a `HTTP status code 405: method not allowed` if the client has already been registered before.

[[credentials_put_method]]
==== *PUT* Method

Provides the server with updated credentials to access the client's system. This credentials object also contains extra information about the client such as its business details.

A `PUT` will switch to the version that contains this credentials endpoint if it's different from the current version. The server must fetch the client's endpoints again, even if the version has not changed.

If successful, the server must generate a new credentials token for the client and respond with the client's updated credentials to access the server's system. The credentials object in the response also contains extra information about the server such as its business details.

This method MUST return a `HTTP status code 405: method not allowed` if the client has not been registered yet.

[[credentials_delete_method]]
==== *DELETE* Method

Informs the server that its credentials to access the client's system are now invalid and can no longer be used. Both parties must end any automated communication. This is the unregistration process.

This method MUST return a `HTTP status code 405: method not allowed` if the client has not been registered before.


[[credentials_object_description]]
=== Object description

[[credentials_credentials_object]]
==== Credentials object

[cols="3,3,1,9",options="header"]
|===
|Property |Type |Card. |Description 

|token |<<types.asciidoc#types_string_type,string>>(64) |1 |The credentials token for the other party to authenticate in your system. (Not encoded in Base64 or any other encoding)
|url |<<types.asciidoc#types_url_type,URL>> |1 |The URL to your API versions endpoint. 
|roles |<<credentials_credentials_role_class,CredentialsRole>> |+ |List of the roles this party provides.
|===

Every role needs a unique combination of: `role`, `party_id` and `country_code`.

A party can have the same role more than once, for example when a CPO provides 'white-label' services for virtual CPOs.

One or more roles and thus `party_id` and `country_code` sets are provided here to inform a server about the `party_id` and `country_code`
sets a client will use when pushing <<transport_and_format.asciidoc#transport_and_format_client_owned_object_push,Client Owned Objects>>.
This helps a server to determine the URLs a client will use when pushing
a <<transport_and_format.asciidoc#transport_and_format_client_owned_object_push,Client Owned Object>>.
The `country_code` is added the make certain the URL used when pushing
a <<transport_and_format.asciidoc#transport_and_format_client_owned_object_push,Client Owned Object>> is unique as
there might be multiple parties in the world with the same `party_id`. The combination of `country_id` and `party_id` should always be unique though.
A party operating in multiple countries can always use the home country of the company for all connections.

For example: EVSE IDs can be pushed under the country and provider identification of a company, even if the EVSEs are actually located in a different country.
This way it is not necessary to establish one OCPI connection per country a company operates in.

The `party_id` and `country_code` given here have no direct link with the eMI3 EVSE IDs and Contract IDs that might be used in the different OCPI modules.
A party implementing OCPI MAY push EVSE IDs with an eMI3 `spot operator` different from the OCPI `party_id` and/or the `country_code`.

[[credentials_example]]
==== Examples

Example of a minimal CPO credentials object:
[source,json]
----
include::examples/credentials_example.json[]
----

Example of a combined CPO/eMSP credentials object:
[source,json]
----
include::examples/credentials_example2.json[]
----

Example of a CPO credentials object with full business details:
[source,json]
----
include::examples/credentials_example3.json[]
----

Example of a CPO credentials object with virtual CPOs:
[source,json]
----
include::examples/credentials_example4.json[]
----


=== Data types

[[credentials_credentials_role_class]]
==== CredentialsRole _class_

[cols="3,3,1,9",options="header"]
|===
|Property |Type |Card. |Description

|role |<<types.asciidoc#types_role_enum,Role>> |1 |Type of role
|business_details |<<mod_locations.asciidoc#mod_locations_businessdetails_class,BusinessDetails>> |1 |Details of this party
|party_id |<<types.asciidoc#types_cistring_type,CiString>>(3) |1 |CPO, eMSP (or other role) ID of this party (following the ISO-15118 standard).
|country_code |<<types.asciidoc#types_cistring_type,CiString>>(2) |1 |ISO-3166 alpha-2 country code of the country this party is operating in.
|===


