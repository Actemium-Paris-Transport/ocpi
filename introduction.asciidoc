[[introduction_ocpi]]
== OCPI

[[introduction_ocpi_2.2]]
=== OCPI 2.2

OCPI 2.2 includes new functionality and improvements, compared to OCPI 2.1.1.

==== Editorial note
This is OCPI 2.2 Release Candidate 1. Functional everything is in this release candidate.
The first draft has not had a lot of review, so we are not yet confident enough to release a FINAL version yet.
We hope that people take the time to review this version and sand feedback so we can improve this.
Even if you do not find any issues, please let us know.

We encourage companies to start implementing OCPI 2.2 based on this release candidate.
The proof is in the pudding, we need implementations to proof OCPI 2.2 is mature enough to be released as FINAL.
When developers are implementing a specification they are the once finding real world issues, most of the times.
If they are able to implement OCPI 2.2 and get it working with other parties, that is the proof we need.

We still want to add more examples, some sequence diagrams and use cases to explain the new functionality.
We hope to add these in the coming weeks.

==== Changes/New functionality:

* Support for Hubs
[disc]
** <<transport_and_format.asciidoc#transport_and_format_message_routing,Message routing headers>>
** <<mod_hub_client_info.asciidoc#mod_hub_client_info_module,Hub Client Info>>

* <<credentials.asciidoc#credentials_credentials_role_class,Support for Virtual CPO's and eMSP's and other roles>>
* <<mod_charging_profiles.asciidoc#mod_charging_profiles_module,Charging Profiles>>
* <<mod_sessions.asciidoc#mod_sessions_set_charging_preferences,Preference based Smart Charging>>
* Improvements:
[disc]
** <<mod_cdrs.asciidoc#mod_cdrs_cdr_object,CDRs>>: Credit CDRs, VAT, Session_id, CdrLocation, CdrToken
** <<mod_sessions.asciidoc#mod_sessions_session_object,Sessions>>: VAT, CdrToken
** <<mod_tariffs.asciidoc#mod_tariffs_tariff_object,CDRs>>: Tariff types, Min/Max price, reservation tariff, Much more examples
** <<mod_locations.asciidoc#mod_locations_location_object,Locations>>: Multiple Tariffs, Lost of small improvements
** <<mod_tokens.asciidoc#mod_tokens_token_object,Tokens>>: Group_id, energy contract
** <<mod_commands.asciidoc#mod_commands_cancelreservation_object,Commands>>: Cancel Reservation added

For more information on detailedchanges see <<changelog.asciidoc#changelog_changelog,changelog>>.

[[introduction_introduction_and_background]]
=== Introduction and background

The Open Charge Point Interface (OCPI) enables a scalable, automated EV roaming setup between Charge Point Operators and e-Mobility Service Providers.
It supports authorization, charge point information exchange (including live status updates and transaction events),
charge detail record exchange, remote charge point commands and, the exchange of smart-charging related information between parties.

It offers market participants in EV an attractive and scalable solution for (international) roaming between networks,
avoiding the costs and innovation-limiting complexities involved with today's non-automated solutions or with central roaming hubs.
As such it helps to enable EV drivers to charge everywhere in a fully-informed way,
helps the market to develop quickly and helps market players to execute their business models in the best way.

What does it offer (main functionality):
* A good roaming system (for bilateral usage and/or via a hub).
* Real-time information about location, availability and price.
* A uniform way of exchanging data (Notification Data Records and Charge Data Records), before during and after the transaction.
* Remote mobile support to access any charge station without pre-registration.

Starting in 2009, e-laad foundation and the predecessor of the eViolin association specified 2 standards in order to retrieve
charge point details and active state. These are called the VAS interface and the Amsterdam interface. In this same period,
a CDR format for the exchange of charge sessions between eViolin members was defined.
This format is currently in use by the majority of the eViolin members.
(eViolin is the branch organisation for EV operators and service providers in NL and responsible for national roaming and issuing of IDâ€™s).
This resulted in 2014 in the development of OCPI.

An international group of companies already supports OCPI. Initiators are EV Box, The New Motion, ElaadNL, BeCharged,
Greenflux and Last Mile Solutions. Other participants include Next Charge, Freshmile, Plugsurfing, Charge-partner, Hubject, e-clearing.net,
ihomer and Siemens. Several other major organizations and roaming platforms are interested in participating.
The Netherlands Knowledge Platform for Charging Infrastructure (NKL) facilitates and coordinates this project to guarantee progress
and ensure development and results. Part of this project is to find a place to continue development in the future.

This document describes a combined set of standards based on the work done in the past. Next to that,
the evolution of these standards and their use is taken into account and some elements have been updated to match nowadays use.

The latest version of this specification can be found here: https://github.com/ocpi/ocpi[https://github.com/ocpi/ocpi]


[[introduction_supported_topologies]]
=== Supported Topologies

OCPI started out as a bilateral protocol, for pair-to-pair communication.
Soon parties started to use OCPI via Hubs, but OCPI 2.1.1 and earlier where not designed for that.
OCPI 2.2 introduces a solution for this: <<transport_and_format.asciidoc#transport_and_format_message_routing,message routing>>.

OCPI 2.2 introduces Platforms that connect via OCPI instead of CPO and eMSP, more on this in: <<terminology.asciidoc#terminology_roles,EV Charging Market Roles>>

==== Pair-to-pair

The simplest topology is a bilateral connection: pair-to-pair between two platforms,
and in the most simple version each platform only has 1 role.

.Pair-to-pair topology example
image::images/architecture_direct.svg[Pair-to-pair topology example]


==== Multiple Pair-to-pair connections

A more real world topology where multiple parties connect their platforms,
and each platform only has 1 role.
(not every party connects with all the other parties with the other role).

.Multiple pair-to-pair topology example
image::images/architecture_multiple_direct_modified.svg[Multiple pair-to-pair topology example]


==== Pair-to-pair multiple roles

The simplest topology is a bilateral connection: pair-to-pair between two platforms,
and both platforms can have multiple roles.

.Pair-to-pair with multiple roles topology example
image::images/architecture_platform_direct.svg[Pair-to-pair with multiple roles topology example]


==== Multiple Pair-to-pair

More a real-world topology when OCPI is used between market parties without a hub.

TODO Visio diagram

It is easy to notice that the amount of connections between platforms explodes.


==== Platforms via Hub

This topology show all Platforms only connect via a Hub, all communication goes via the Hub.

TODO Visio diagram

==== Platforms via Hub and direct

Not all Platforms will only communicate via a Hub.
There might be different reasons for Platforms to still have pair-to-pair connections.
The Hub might not yet support new functionality.
The Platforms use a custom module for some new project, which is not supported by the Hub.
etc.

TODO Visio diagram



