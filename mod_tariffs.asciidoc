:numbered:
[[mod_tariffs_tariffs_module]]
== _Tariffs_ module

*Module Identifier: `tariffs`*

*Data owner: `CPO`*

The Tariffs module gives eMSPs information about the tariffs used by the CPO.

[[mod_tariffs_flow_and_lifecycle]]
=== Flow and Lifecycle

[[mod_tariffs_push_model]]
==== Push model

When the CPO creates a new Tariff they push them to the eMSPs by calling the <<mod_tariffs_put_method,PUT>> on the eMSPs
Tariffs endpoint with the newly created Tariff object.

Any changes to the Tariff(s) in the CPO system can be send to the eMSP system by calling either <<mod_tariffs_put_method,PUT>>
or <<mod_tariffs_patch_method,PATCH>> on the eMSPs Tariffs endpoint with the updated Tariff object.

When the CPO deletes a Tariff, they will update the eMSPs systems by calling <<mod_tariffs_delete_method,DELETE>>
on the eMSPs Tariffs endpoint, with the ID of the Tariff that is deleted.

When the CPO is not sure about the state or existence of a Tariff object in the eMSPs system, the
CPO can call the <<mod_tariffs_msp_get_method,GET>> to validate the Tariff object in the eMSP system. 

[[mod_tariffs_pull_model]]
==== Pull model

eMSPs who do not support the Push model need to call
<<mod_tariffs_cpo_get_method,GET>> on the CPOs Tariff endpoint to receive
all Tariffs, replacing the current list of known Tariffs with the newly received list.

[[mod_tariffs_interfaces_and_endpoints]]
=== Interfaces and endpoints

There is both a CPO and an eMSP interface for Tariffs. Advised is to use the push direction from CPO to eMSP during normal operation.
The CPO interface is meant to be used when the connection between 2 parties is established to retrieve the current list of Tariffs objects, and when the eMSP is not 100% sure the Tariff cache is still correct.

[[mod_tariffs_cpo_interface]]
==== CPO Interface

The CPO Tariffs interface gives the eMSP the ability to request tariffs.


[cols="2,12",options="header"]
|===
|Method |Description 

|<<mod_tariffs_cpo_get_method,GET>> |Returns Tariff Objects from the CPO, last updated between the {date_from} and {date_to} (<<transport_and_format.asciidoc#transport_and_format_pagination,paginated>>) 
|POST |n/a 
|PUT |n/a 
|PATCH |n/a 
|DELETE |n/a 
|===

[[mod_tariffs_cpo_get_method]]
===== *GET* Method

Fetch information about all Tariffs.

Endpoint structure definition:

`{tariffs_endpoint_url}?[date_from={date_from}]&amp;[date_to={date_to}]&[offset={offset}]&[limit={limit}]`

Examples:

`+https://www.server.com/ocpi/cpo/2.2/tariffs/?date_from=2019-01-28T12:00:00&date_to=2019-01-29T12:00:00+`

`+https://ocpi.server.com/2.2/tariffs/?offset=50+`

`+https://www.server.com/ocpi/2.2/tariffs/?date_from=2019-01-29T12:00:00&limit=100+`

`+https://www.server.com/ocpi/cpo/2.2/tariffs/?offset=50&amp;limit=100+`


[[mod_tariffs_cpo_get_request_parameters]]
====== Request Parameters

If additional parameters: `{date_from}` and/or `{date_to}` are provided,
only Tariffs with (`last_updated`) between the given `{date_from}` (including) and `{date_to}` (excluding) will be returned.

This request is <<transport_and_format.asciidoc#transport_and_format_pagination,paginated>>, it supports the <<transport_and_format.asciidoc#transport_and_format_paginated_request,pagination>> related URL parameters.

[cols="3,2,1,10",options="header"]
|===
|Parameter |Datatype |Required |Description 

|date_from |<<types.asciidoc#types_datetime_type,DateTime>> |no |Only return Tariffs that have `last_updated` after or equal to this Date/Time (inclusive).
|date_to |<<types.asciidoc#types_datetime_type,DateTime>> |no |Only return Tariffs that have `last_updated` up to this Date/Time, but not including (exclusive).
|offset |int |no |The offset of the first object returned. Default is 0. 
|limit |int |no |Maximum number of objects to GET. 
|===

[[mod_tariffs_cpo_get_response_data]]
====== Response Data

The endpoint returns an object with a list of valid Tariffs, the header will contain the <<transport_and_format.asciidoc#transport_and_format_paginated_response,pagination>> related headers.

Any older information that is not specified in the response is considered as no longer valid.
Each object must contain all required fields. Fields that are not specified may be considered as null values.

[cols="4,1,12",options="header"]
|===
|Type |Card. |Description 

|<<mod_tariffs_tariff_object,Tariff>> |* |List of all tariffs. 
|===

[[mod_tariffs_emsp_interface]]
==== eMSP Interface

Tariffs is a <<transport_and_format.asciidoc#transport_and_format_client_owned_object_push,Client Owned Object>>, so the end-points need to contain the required extra fields: {<<credentials.asciidoc#credentials_credentials_object,party_id>>} and {<<credentials.asciidoc#credentials_credentials_object,country_code>>}.

Endpoint structure definition:

`{tariffs_endpoint_url}{country_code}/{party_id}/{tariff_id}`

Example:

`+https://www.server.com/ocpi/cpo/2.2/tariffs/BE/BEC/12+`


[cols="2,12",options="header"]
|===
|Method |Description 

|<<mod_tariffs_msp_get_method,GET>> |Retrieve a Tariff as it is stored in the eMSP system. 
|POST |n/a 
|<<mod_tariffs_put_method,PUT>> |Push new/updated Tariff object to the eMSP. 
|<<mod_tariffs_patch_method,PATCH>> |Notify the eMSP of partial updates to a Tariff. 
|<<mod_tariffs_delete_method,DELETE>> |Remove Tariff object which is no longer valid 
|===

[[mod_tariffs_msp_get_method]]
===== *GET* Method

If the CPO wants to check the status of a Tariff in the eMSP system it might GET the object from the eMSP system for validation purposes. The CPO is the owner of the objects, so it would be illogical if the eMSP system had a different status or was missing an object.

[[mod_tariffs_msp_get_request_parameters]]
====== Request Parameters

The following parameters can be provided as URL segments.

[cols="3,2,1,10",options="header"]
|===
|Parameter |Datatype |Required |Description 

|country_code |<<types.asciidoc#types_cistring_type,CiString>>(2) |yes |Country code of the CPO requesting this PUT to the eMSP system.
|party_id |<<types.asciidoc#types_cistring_type,CiString>>(3) |yes |Party ID (Provider ID) of the CPO requesting this PUT to the eMSP system.
|tariff_id |<<types.asciidoc#types_cistring_type,CiString>>(36) |yes |Tariff.id of the Tariff object to retrieve.
|===

[[mod_tariffs_msp_get_response_data]]
====== Response Data

The response contains the requested object.

[cols="4,1,12",options="header"]
|===
|Type |Card. |Description 

|<<mod_tariffs_tariff_object,Tariff>> |1 |The requested Tariff object. 
|===

[[mod_tariffs_put_method]]
===== *PUT* Method

New or updated Tariff objects are pushed from the CPO to the eMSP.

[[mod_tariffs_request_body]]
====== Request Body

In the put request the new or updated Tariff object is sent.

[cols="4,1,12",options="header"]
|===
|Type |Card. |Description 

|<<mod_tariffs_tariff_object,Tariff>> |1 |New or updated Tariff object 
|===

[[mod_tariffs_msp_put_request_parameters]]
====== Request Parameters

The following parameters can be provided as URL segments.

[cols="3,2,1,10",options="header"]
|===
|Parameter |Datatype |Required |Description 

|country_code |<<types.asciidoc#types_cistring_type,CiString>>(2) |yes |Country code of the CPO requesting this PUT to the eMSP system. This SHALL be the same value as the `country_code` in the Tariff object being pushed
|party_id |<<types.asciidoc#types_cistring_type,CiString>>(3) |yes |Party ID (Provider ID) of the CPO requesting this PUT to the eMSP system. This SHALL be the same value as the `party_id` in the Tariff object being pushed
|tariff_id |<<types.asciidoc#types_cistring_type,CiString>>(36) |yes |Tariff.id of the (new) Tariff object (to replace).
|===

[[mod_tariffs_example_new_tariff_2_euro_per_hour]]
====== Example: New Tariff 2 euro per hour

[source,json]
----
PUT To URL: https://www.server.com/ocpi/emsp/2.2/tariffs/NL/TNM/12

include::examples/tariff_put_example.json[]
----

[[mod_tariffs_patch_method]]
===== *PATCH* Method

The PATCH method works the same as the <<mod_tariffs_put_method,PUT>> method, except that the fields/objects that have to be updated have to be present,
other fields/objects that are not specified are considered unchanged.

[[mod_tariffs_example_change_tariff_to_2,50]]
====== Example: Change Tariff to 2,50

[source,json]
----
PUT To URL: https://www.server.com/ocpi/emsp/2.2/tariffs/NL/TNM/12

include::examples/tariff_patch_example.json[]
----


[[mod_tariffs_delete_method]]
===== *DELETE* Method

Delete a no longer valid Tariff object.

[[mod_tariffs_msp_delete_request_parameters]]
====== Request Parameters

The following parameters can be provided as URL segments.

[cols="3,2,1,10",options="header"]
|===
|Parameter |Datatype |Required |Description 

|country_code |<<types.asciidoc#types_cistring_type,CiString>>(2) |yes |Country code of the CPO requesting this PUT to the eMSP system.
|party_id |<<types.asciidoc#types_cistring_type,CiString>>(3) |yes |Party ID (Provider ID) of the CPO requesting this PUT to the eMSP system.
|tariff_id |<<types.asciidoc#types_cistring_type,CiString>>(36) |yes |Tariff.id of the Tariff object to delete.
|===

[[mod_tariffs_object_description]]
=== Object description

[[mod_tariffs_tariff_object]]
==== _Tariff_ Object

A Tariff Object consists of a list of one or more TariffElements, these elements can be used to create complex Tariff structures.

When the list of elements contains more than 1 element with the same Tariff Dimension (ENERGY/FLAT/TIME etc.),
than the first Tariff with that Dimension in the list with matching Restrictions will be used.
When no Tariff with a specific Dimension is found for which the Restrictions match,
and there is no Tariff in the list with that specific Dimension without restrictions,
there will be no costs for that Tariff Dimension.

It is advised to always set a "default" Tariff per Dimension (ENERGY/FLAT/TIME etc.), the last Tariff,
with a specific Dimension, in the list of elements with no restriction.
This acts as a fallback when none of the TariffElements, of a specific Dimension,
before this one, matches the current relevant parameters.

To define a "Free of Charge" Tariff in OCPI, a tariff has to be provided that has a `type` = `FLAT` and `price` = `0.00`.
See: <<mod_tariffs_free_of_charge_tariff_example,Free of Charge Tariff example>>

[cols="3,2,1,10",options="header"]
|===
|Property |Type |Card. |Description 

|country_code |<<types.asciidoc#types_cistring_type,CiString>>(2) |1 |ISO-3166 alpha-2 country code of the CPO that 'owns' this Tariff.
|party_id |<<types.asciidoc#types_cistring_type,CiString>>(3) |1 |CPO ID of the CPO that 'owns' this Tariff (following the ISO-15118 standard).
|id |<<types.asciidoc#types_cistring_type,CiString>>(36) |1 |Uniquely identifies the tariff within the CPOs platform (and suboperator platforms).
|currency |<<types.asciidoc#types_string_type,string>>(3) |1 |Currency of this tariff, ISO 4217 Code 
|type |<<mod_tariffs_tariff_type,TariffType>> |? | Defines what type of tariff this is. This makes it possible to make distinction possible for different <<mod_sessions.asciidoc#mod_sessions_set_charging_preferences,Charging Preferences>>. When omitted, this tariff is valid for all sessions.
|tariff_alt_text |<<types.asciidoc#types_displaytext_class,DisplayText>> |* |List of multi language alternative tariff info text
|tariff_alt_url |<<types.asciidoc#types_url_type,URL>> |? |Alternative URL to tariff info 
|min_price |<<types.asciidoc#types_price_class,Price>> |? |When this field is set, a Charging Session with this tariff will minimum cost this amount.
      This is different from a `FLAT` fee (Start Tariff, Transaction Fee), such a fee is a fixed amount that has to be payed for any Charging Session.
      A Minimum price means that when the cost of a Charging Session is lower then this amount, the cost of the Session will be equal to this amount. Also see note below.
|max_price |<<types.asciidoc#types_price_class,Price>> |? |When this field is set, a Charging Session with this tariff will NOT cost more then this amount. See note below.
|elements |<<mod_tariffs_tariffelement_class,TariffElement>> |+ |List of tariff elements
|start_date_time |<<types.asciidoc#types_datetime_type,DateTime>> |? |The time when this tariff becomes active. Typically used for a new tariff that is already given with the location, before it becomes active. (See note below)
|end_date_time |<<types.asciidoc#types_datetime_type,DateTime>> |? |The time after which this tariff is no longer valid. Typically used when this tariff is going to be replaced with a different tariff in the near future. (See note below)
|energy_mix |<<mod_locations.asciidoc#mod_locations_energymix_class,EnergyMix>> |? |Details on the energy supplied with this tariff.
|last_updated |<<types.asciidoc#types_datetime_type,DateTime>> |1 |Timestamp when this Tariff was last updated (or created). 
|===

NOTE: `min_price`: As the VAT might be built up of different parts, there might be situations where minimum including VAT is reached earlier or later then then the minimum excluding VAT.
So as a rule: they both apply:
 - Minimum cost of a Charging Session including VAT can never be lower than the min_price including VAT.
 - Minimum cost of a Charging Session excluding VAT can never be lower than the min_price excluding VAT.

NOTE: `max_price`: As the VAT might be built up of different parts, there might be situations where maximum including VAT is reached earlier or later then then the maximum excluding VAT.
So as a rule: they both apply:
 - Total cost of a Charging Session including VAT can never be higher than the max_price including VAT.
 - Total cost of a Charging Session excluding VAT can never be higher than the max_price excluding VAT.

NOTE: `start_date_time` and `end_date_time`: When the tariff of a Charge Point (Location) is changed with an ongoing charging session,
it is common to not switch the tariff until the ongoing session is finished. But this is NOT a rule of OCPI.
The driver has started charging and might have read the tariff info before charging. When the tariff is then changed during the session,
the driver might get a bill that is higher then expected.



[[mod_tariffs_examples]]
===== Examples

[[mod_tariffs_simple_tariff_example_0_25_euro_per_kwh]]
====== Simple Tariff example 0.25 euro per kWh

- 0.25 euro per kWh (excluding VAT)
- 10% VAT
- Billed per 1 Wh

[source,json]
----
include::examples/tariff_8_simple_025kwh.json[]
----


[[mod_tariffs_tariff_example_0_25_euro_per_kwh_start]]
====== Tariff example 0.25 euro per kWh + start fee

* Start or transaction fee
[disc]
** 0.50 euro (excluding VAT)
** 20% VAT
* Energy
[disc]
** 0.25 euro per kWh (excluding VAT)
** 10% VAT
** Billed per 1 Wh

This tariff will result in costs of 5.50 euro (ex VAT) when 20 kWh is charged.

[source,json]
----
include::examples/tariff_9_025kwh_start.json[]
----


[[mod_tariffs_tariff_example_0_25_euro_per_kwh_min_price]]
====== Tariff example 0.25 euro per kWh + minimum price

* minimum price 0.50 (ex VAT)
* 0.25 euro per kWh (excluding VAT)
* 10% VAT
* Billed per 1 Wh

This tariff will result in costs of 5.00 euro (ex VAT) when 20 kWh is charged.
But if less then 2 kWh is charged, 0.50 (ex VAT) will be billed.

This is different from a start fee, see example above.

[source,json]
----
include::examples/tariff_12_025kwh_min_price.json[]
----


[[mod_tariffs_tariff_example_0_25_euro_per_kwh_parking_start]]
====== Tariff example 0.25 euro per kWh + parking fee + start fee

* Start or transaction fee
[disc]
** 0.50 euro (excluding VAT)
** 20% VAT
* Energy
[disc]
** 0.25 euro per kWh (excluding VAT)
** 10% VAT
** Billed per 1 Wh
* Parking
[disc]
** 2.00 euro per hour (excluding VAT)
** 20% VAT
** Billed per 15 min (900 seconds)

[source,json]
----
include::examples/tariff_10_025kwh_parking_start.json[]
----


[[mod_tariffs_tariff_example_0_25_euro_per_kwh_start_max_price]]
====== Tariff example 0.25 euro per kWh + start fee + max price + tariff end date

* Start or transaction fee
[disc]
** 0.50 euro (excluding VAT)
** 20% VAT
* Energy
[disc]
** 0.25 euro per kWh (excluding VAT)
** 10% VAT
** Billed per 1 Wh

This tariff has a maximum price of 25 euro (ex VAT).

This tariff has an end date: 30 June 2019, this is typically used when a tariff is going to be replaced by a new tariff.
A <<mod_locations.asciidoc#mod_locations_connector_object,Connector>> of a <<mod_locations.asciidoc#mod_locations_location_object,Location>> can have multiple tariffs (IDs).
By assigning both the old and the new tariff ID, they will automatically be replaced. It is then not need to update all location at the same time, the old tariff can be removed later.

[source,json]
----
include::examples/tariff_6_025kwh_start_max_price.json[]
----


[[mod_tariffs_simple_tariff_example_2_euro_per_hour]]
====== Simple Tariff example 2 euro per hour

An example of a tariff where the driver does not pay per kWh, but for the time of using the Charge Point.

- 2.00 euro per hour charging (not per kWh) (excluding VAT)
- 10% VAT
- Billed per 1 minutes (60 seconds)

As this is tariff is only has a `TIME` price_component, the driver will not be billed for time not charging: `PARKING_TIME`

[source,json]
----
include::examples/tariff_1_simple_2hour.json[]
----


[[mod_tariffs_simple_tariff_example_3_euro_per_hour_5_euro_parking]]
====== Simple Tariff example 3 euro per hour, 5 euro per hour parking

Example of a tariff where the driver pays for the time of using the Charge Point, but pays more when the car is no longer charging,
to discourage the EV driver of leaving his EV connected when it is full.

* Charging time
[disc]
** 3.00 euro per hour charging (not per kWh) (excluding VAT)
** 10% VAT
** Billed per 1 minutes (60 seconds)
* Parking
[disc]
** 5.00 euro per hour (excluding VAT)
** 20% VAT
** Billed per 5 min (300 seconds)

[source,json]
----
include::examples/tariff_13_simple_3hour_5parking.json[]
----


[[mod_tariffs_simple_tariff_example_with_alternative_multi_language_text]]
====== Ad-Hoc simple Tariff example with multiple languages

For ad-hoc charging (paying for charging without a contract, the tariff `elements` are less needed.
Normally no CDR will be send to an eMSP for ad-hoc charging.
Having a good human readable text is much more useful.

- 2 euro per hour charging (not per kWh) (including VAT)
- 5.2% VAT
- Billed per 5 minutes (300 seconds)

[source,json]
----
include::examples/tariff_2_alt_text.json[]
----


[[mod_tariffs_adhoc_tariff_example_not_possible_with_ocpi]]
====== Ad-Hoc Tariff example not possible with OCPI

For this example, credit card start tariff is 0.50 euro, but when using a debit card it is only 0.25 euro.

Such a tariff cannot be modeled with OCPI, but by modeling it as 0.50 euro start tariff,
using a debit card as a discount of 0.25 euro. Nobody is likely to complain. But the `tariff_alt_text` explains this clearly.

[source,json]
----
include::examples/tariff_11_not_possible_alt_text.json[]
----


[[mod_tariffs_simple_tariff_example_with_alternative_url]]
====== Simple Tariff example with alternative URL

This examples shows the use of `tariff_alt_url`.

This examples shows a `PROFILE_CHEAP` tariff. This is a smart-charging tariff.
Were a driver selects to charge as cheaply as possible.
In such case, the price might not be fixed, but depend on the real-time energy prices.
To explain this to the driver, a short text inside `tariff_alt_text` might not be the best solution, maybe you want to show a graph.
In such a case, an URL can be given that links to a better explanation of the tariff.

- 0.25 euro per kWh (excluding VAT)
- 10% VAT
- Billed per 0.1 kWh (100 Wh)

[source,json]
----
include::examples/tariff_3_alt_url.json[]
----


[[mod_tariffs_complex_tariff_example]]
====== Complex Tariff example

- 2.50 euro start tariff
- 1.00 euro per hour charging tariff for less than 32A (paid per 15 minutes)
- 2.00 euro per hour charging tariff for more than 32A on weekdays (paid per 10 minutes)
- 1.25 euro per hour charging tariff for more than 32A during the weekend (paid per 10 minutes)

Parking costs:

- Weekdays: between 09:00 and 18:00 : 5 euro (paid per 5 minutes)
- Saturday: between 10:00 and 17:00 : 6 euro (paid per 5 minutes)

VAT:

- 15% on start tariff
- 20% on charging per hour
- 10% on parking

[source,json]
----
include::examples/tariff_4_complex.json[]
----


[[mod_tariffs_free_of_charge_tariff_example]]
====== Free of Charge Tariff example
In this example no VAT (that might not always be the case)

[source,json]
----
include::examples/tariff_5_free_of_charge.json[]
----


[[mod_tariffs_first_hour_free_energy]]
====== First hour free energy example

* The first hour of parking time is free.
* From the second to the fourth hour is 2.00 euro per hour
* From the fourth on 3.00 euro per hour

Something similar applies to the kWh consumed.

* The first kWhs is free,
* 0.20 euro per kWh for the rest.

[source,json]
----
include::examples/tariff_7_first_hour_kwh_free.json[]
----


[[mod_tariffs_tariff_example_15_reservation_5_euro_per_hour]]
====== Tariff example with reservation price

* Reservation
[disc]
** 5.00 euro per hour (excluding VAT)
** 20% VAT
** Billed per 1 minute (60 seconds)
* Start or transaction fee
[disc]
** 0.50 euro (excluding VAT)
** 20% VAT
* Energy
[disc]
** 0.25 euro per kWh (excluding VAT)
** 10% VAT
** Billed per 1 Wh

[source,json]
----
include::examples/tariff_15_reservation_5_euro_per_hour.json[]
----


[[mod_tariffs_tariff_example_16_reservation_2_euro_fee_5_euro_per_hour]]
====== Tariff example with reservation price and fee

* Reservation
[disc]
** 2.00 euro reservation fee (excluding VAT)
** 5.00 euro per hour (excluding VAT)
** 20% VAT
** Billed per 5 minutes (300 seconds)
* Start or transaction fee
[disc]
** 0.50 euro (excluding VAT)
** 20% VAT
* Energy
[disc]
** 0.25 euro per kWh (excluding VAT)
** 10% VAT
** Billed per 1 Wh

[source,json]
----
include::examples/tariff_16_reservation_2_euro_fee_5_euro_per_hour.json[]
----


[[mod_tariffs_tariff_example_17_reservation_with_expire_fee]]
====== Tariff example with reservation price and expire fee

* Reservation
[disc]
** 4.00 euro reservation expire fee (excluding VAT) (when reservation not used, this fee is added to reservation cost)
** 2.00 euro per hour (excluding VAT)
** 20% VAT
** Billed per 10 minutes (600 seconds)
* Start or transaction fee
[disc]
** 0.50 euro (excluding VAT)
** 20% VAT
* Energy
[disc]
** 0.25 euro per kWh (excluding VAT)
** 10% VAT
** Billed per 1 Wh

[source,json]
----
include::examples/tariff_17_reservation_with_expire_fee.json[]
----


[[mod_tariffs_tariff_example_18_reservation_with_expire_time]]
====== Tariff example with reservation time and expire time

* Reservation
[disc]
** 3.00 euro per hour (excluding VAT)
** 6.00 euro per hour (excluding VAT) (When reservation expires, EV driver never starts to charge)
** 20% VAT
** Billed per 10 minutes (600 seconds)
* Start or transaction fee
[disc]
** 0.50 euro (excluding VAT)
** 20% VAT
* Energy
[disc]
** 0.25 euro per kWh (excluding VAT)
** 10% VAT
** Billed per 100 Wh

[source,json]
----
include::examples/tariff_17_reservation_with_expire_fee.json[]
----

Example of cost:

- EV driver reserves the EVSE for half an hour (30 minutes).
- When the driver would start charging after 9 minutes, and charges 48.03 kWh: 0.50 + 0.50 + 12 = 13.00 euro (excluding VAT)
- When the driver would start charging after 12 minutes, and charges 62.98 kWh: 1.00 + 0.50 + 15.75 = 17.25 euro (excluding VAT)
- When the driver never start to charge before the reservation expires, cost: 3.00 euro (excluding VAT)


[[mod_tariffs_data_types]]
=== Data types

[[mod_tariffs_dayofweek_enum]]
==== DayOfWeek _enum_

[cols="3,10",options="header"]
|===
|Value |Description 

|MONDAY |Monday 
|TUESDAY |Tuesday 
|WEDNESDAY |Wednesday 
|THURSDAY |Thursday 
|FRIDAY |Friday 
|SATURDAY |Saturday 
|SUNDAY |Sunday 
|===

[[mod_tariffs_pricecomponent_class]]
==== PriceComponent _class_

[cols="3,4,1,10",options="header"]
|===
|Property |Type |Card. |Description 

|type |<<mod_tariffs_tariffdimensiontype_enum,TariffDimensionType>> |1 |Type of tariff dimension 
|price |<<types.asciidoc#types_number_type,number>> |1 |price per unit (excluding VAT) for this tariff dimension 
|vat |<<types.asciidoc#types_number_type,number>> |? |applicable VAT percentage for this tariff dimension. If omitted, no VAT is applicable, that is different from 0% VAT, which would be a value of 0.0 here.
|step_size |int |1 |Minimum amount to be billed. This unit will be billed in this step_size blocks. For example: if type is time and step_size is 300, then time will be billed in blocks of 5 minutes, so if 6 minutes is used, 10 minutes (2 blocks of step_size) will be billed.
|===

NOTE: `step_size`: depends on the `type`, every `type` (except `FLAT`) defines a step_size multiplier, this is the size of every 'step' for that type in the gaven unit. +
 +
For example: `PARKING_TIME` has 'step_size multiplier: 1 second' That means that the `step_size` of a `PriceComponent` is multiplied by 1 second.
Thus a `step_size = 300` means 300 seconds = 5 minutes, this means that when somebody has parked for 8 minutes he will be billed for 10, parked for 11 minutes then billed for 15. (steps of 5 minutes) +
 +
Example with `ENERGY`: `Price`= 0.25, `step_size` = 1. +
Then energy is billed per 1 Wh. If somebody charges his EV with 115.2 Wh, then he is billed for 116 Wh, price: 0.029. +
When `step_size` = 25, then the same amount will be billed for 125 Wh, price: 0.031. +
When `step_size` = 500, then the same amount will be billed for 500 Wh, price: 0.125.

NOTE: `step_size` shall only be taken into account for the last <<mod_tariffs_tariffelement_class,`TariffElement`>>
and when switching to another <<mod_tariffs_tariffelement_class,`TariffElement`>> for the <<mod_tariffs_pricecomponent_class,`PriceComponents`>>
that are not in the new <<mod_tariffs_tariffelement_class,`TariffElement`>>.
The same rule applies in case there is a switch between 2 tariffs
(for example when a driver selects a different <<mod_sessions.asciidoc#mod_sessions_set_charging_preferences,Charging Preference>> <<mod_sessions.asciidoc#mod_sessions_profile_type_enum,`profile_type`>>).


===== Examples tariff
Example tariff for explaining `step_size` when switching from one <<mod_tariffs_tariffelement_class,`TariffElement`>> to another:

- Charging cost 1.20 euro p/hour before 17:00, step_size: 30 minutes (1800 seconds)
- Charging cost 2.40 euro p/hour after 17:00, step_size: 15 minutes (900 seconds)
- Parking  cost 1.00 euro p/hour before 20:00, step_size: 15 minutes (900 seconds)

[source,json]
----
include::examples/tariff_14_step_size.json[]
----

===== Example switch to different price:

An EV driver plugs in at 16:55, charges for 10 minutes (TIME), stops charging but stays plugged in for 2 min (PARKING TIME), and then leaves. Total session time = 12min.

- 5 billable minutes charging time before 17:00: 1.20 euro p/hour = 0.10 euro
- 10 billable minutes charging time after 17:00: 2.40 euro p/hour = 0.40 euro (10 minutes billed instead of 5: step_size is 15 minutes in the last tariff element, so total charging time is billed for 15 minutes)
- 15 billable minutes parking time: 1 euro p/hour = 0.25 euro
- 0.75 euro total for this session.


Other example: if the EV driver plugs in at 16h35, and charges for 35 minutes (TIME) :

- 25 billable minutes charging time before 17:00: 1.20 euro p/hour = 0.50 euro
- 20 billable minutes charging time after 17:00: 2.40 euro p/hour = 0.80 euro (20 minutes billed instead of 10: step_size is 15 minutes in the last tariff element, so total charging time is billed for 45 minutes)
- 45 billable minutes parking time: 1 euro p/hour = 0.75 euro
- 2.05 euro total for this session.


===== Example switching to free tariff element:

When parking becomes free after 20:00, the new <<mod_tariffs_tariffelement_class,`TariffElement`>> after 20:00 will not contain a
<<mod_tariffs_tariffdimensiontype_enum,`PARKING_TIME`>> <<mod_tariffs_pricecomponent_class,`PriceComponent`>>. So the last parking period that needs to be payed,
before 20:00, will be billed per step_size of the <<mod_tariffs_tariffdimensiontype_enum,`PARKING_TIME`>> <<mod_tariffs_pricecomponent_class,`PriceComponent`>> before 20:00.

Example of this:

An EV driver plugs in at 19:55, charges for 10 min (TIME), stops charging but stays plugged in for 2 min (PARKING TIME), and then leaves. Total session time = 12min.

- 5 billable minutes charging time before 20:00: 2.40 euro p/hour = 0.20 euro
- 10 billable minutes charging time after 20.00: 2.40 euro p/hour = 0.40 euro (10 minutes billed instead of 5: step_size is 15 minutes in the last tariff element, so total charging time is billed for 15 minutes)
- 15 billable minutes parking time: 1 euro p/hour = 0.25 euro (15 minutes billed instead of 5: step_size of the last PARKING_TIME is 900: 15 minutes)
- 0.85 euro total for this session.


[[mod_tariffs_reservation_restriction_type]]
==== ReservationRestrictionType _enum_

[cols="3,10",options="header"]
|===
|Value |Description
|RESERVATION |This TariffElement is for the cost associated with a reservation.
|RESERVATION_EXPIRES | This TariffElement is only for cost associated with a reservation that expires, driver does not start a charging session before <<mod_commands.asciidoc#mod_commands_reservenow_object,expiry_date>>.
|===

NOTE: When a Tariff has both a `RESERVATION` and a `RESERVATION_EXPIRES` TariffElement, with both a  <<mod_tariffs_tariffdimensiontype_enum,TIME>> PriceComponent,
the time based cost of an expired reservation duration will be the price in the `RESERVATION_EXPIRES` TariffElement.

[[mod_tariffs_tariffelement_class]]
==== TariffElement _class_

[cols="3,4,1,10",options="header"]
|===
|Property |Type |Card. |Description 

|price_components |<<mod_tariffs_pricecomponent_class,PriceComponent>> |+ |List of price components that make up the pricing of this tariff 
|restrictions |<<mod_tariffs_tariffrestrictions_class,TariffRestrictions>> |? |Tariff restrictions object 
|===

[[mod_tariffs_tariffdimensiontype_enum]]
==== TariffDimensionType _enum_

[cols="3,10",options="header"]
|===
|Value |Description 

|ENERGY |defined in kWh, step_size multiplier: 1 Wh 
|FLAT |flat fee, no unit 
|PARKING_TIME |time not charging: defined in hours, step_size multiplier: 1 second 
|TIME |time charging: defined in hours, step_size multiplier: 1 second +
Can also be used in combination with <<mod_tariffs_tariffrestrictions_class,reservation>> for the the price of the reservation time.
|===


[[mod_tariffs_tariffrestrictions_class]]
==== TariffRestrictions _class_

These restrictions are not for the entire Charging Session, but the TariffRestrictions make a TariffElement become active or inactive during a Charging Session.

[cols="3,2,1,10",options="header"]
|===
|Property |Type |Card. |Description 

|start_time |<<types.asciidoc#types_string_type,string>>(5) |? |Start time of day, for example 13:30, valid from this time of the day. Must be in 24h format with leading zeros. Hour/Minute separator: ":" Regex: [0-2][0-9]:[0-5][0-9] 
|end_time |<<types.asciidoc#types_string_type,string>>(5) |? |End time of day, for example 19:45, valid until this time of the day. Same syntax as start_time 
|start_date |<<types.asciidoc#types_string_type,string>>(10) |? |Start date, for example: 2015-12-24, valid from this day 
|end_date |<<types.asciidoc#types_string_type,string>>(10) |? |End date, for example: 2015-12-27, valid until this day (excluding this day) 
|min_kwh |<<types.asciidoc#types_number_type,number>> |? |Minimum used energy in kWh, for example 20, valid from this amount of energy is used 
|max_kwh |<<types.asciidoc#types_number_type,number>> |? |Maximum used energy in kWh, for example 50, valid until this amount of energy is used 
|min_current |<<types.asciidoc#types_number_type,number>> |? |Sum of the minimum current in A over all phases, for example 5. When the Charging Session is charging more then this amount of current,
                                                            this TariffElement is/becomes active. Is the charging current is lower, this TariffElement is not valid.
                                                            This is NOT the minimum current over the entire Charging Session.
                                                            This restriction can make a TariffElement become active when the charging current is above this value,
                                                            but the TariffElement is no longer active when charging drops below this current.
|max_current |<<types.asciidoc#types_number_type,number>> |? |Sum of the maximum current in A over all phases, for example 20. When the Charging Session is charging less then this amount of current,
                                                         this TariffElement becomes/is active. Is the charging current is higher, this TariffElement is not valid.
                                                         This is NOT the maximum current over the entire Charging Session.
                                                         This restriction can make a TariffElement become active when the charging current is below this value,
                                                         but the TariffElement is no longer active when charging comes above this current.
|min_power |<<types.asciidoc#types_number_type,number>> |? |Minimum power in kW, for example 5. When the Charging Session is consuming more then this amount of power,
                                                            this TariffElement is/becomes active. Is the charging power is lower, this TariffElement is not valid.
                                                            This is NOT the minimum power over the entire Charging Session.
                                                            This restriction can make a TariffElement become active when the charging power is above this value,
                                                            but the TariffElement is no longer active when charging drops below this power.
|max_power |<<types.asciidoc#types_number_type,number>> |? |Maximum power in kW, for example 20. When the Charging Session is consuming less then this amount of power,
                                                         this TariffElement becomes/is active. Is the charging power is higher, this TariffElement is not valid.
                                                         This is NOT the maximum power over the entire Charging Session.
                                                         This restriction can make a TariffElement become active when the charging power is below this value,
                                                         but the TariffElement is no longer active when charging comes above this power.
|min_duration |int |? |Minimum duration in seconds the Charging Session is ongoing. When the duration of the ongoing Charging Session is longer then this value,
                      this TariffElement is active, before that moment this TariffElement is not yet active. Duration in seconds.
|max_duration |int |? |Maximum duration in seconds the Charging Session is ongoing. When the duration of the ongoing Charging Session is shorted then this value,
                      this TariffElement is active, after that moment this TariffElement is no longer active. Duration in seconds.
|day_of_week |<<mod_tariffs_dayofweek_enum,DayOfWeek>> |* |Which day(s) of the week this TariffElement is active.
|reservation |<<mod_tariffs_reservation_restriction_type,ReservationRestrictionType>> |? |When this field is present, this tariffElement is for a reservation.
A reservation starts when the reservation is made, and ends when the drivers start charging on the reserved EVSE/Location, or when the reservation expires.
A reservation can only have: <<mod_tariffs_tariffdimensiontype_enum,FLAT>> and <<mod_tariffs_tariffdimensiontype_enum,TIME>> TariffDimensions, where TIME is for the duration of the reservation.
|===

TODO: `min_current` and `max_current`: Should this NOT be the sum of the current over all used phases?

===== Examples tariffRestriction max_power

- Charging slower then 16 kW cost 1.00 euro p/hour (ex VAT)
- Charging between 16 kW and 32 kW cost 1.50 euro p/hour (ex VAT)
- Charging faster then 32 kW cost 2.00 euro p/hour (ex VAT) (no restriction: fallback tariff)

[source,json]
----
include::examples/tariffrestriction_example_max_power.json[]
----

Using this example: when a charging session starts with the first kWh at 6 kW,
then goes to 48 kWh charging and charges 40 kWh, then the EV is almost full and charging slows down to 4 kW,
0.5 kWh is charged at this slower speed before the EV is unplugged.

The cost will be:

- 1 kWh at 6 kW: 0.20 euro
- 40 kWh at 48 kW: 20.00 euro
- 0.5 kWh at: 4 kW: 0.10 euro

Total: 20.30 euro.


===== Examples tariffRestriction max_duration

A supermarket wants to allow their customer to charge for free.

As most customers will be out of the store in 20 minutes, they allow free charging for 30 minutes.
If a customer charger longer they will charge him the normal price per kWh.
But they also don't want customers to use their Charge Points and thus parking space for too long.
So to discourage long use, charging becomes much more expensive after 1 hour:

- First 30 minutes charging is free.
- After that: 0.25 euro per kWh (ex VAT)
- After 60 minutes: 0.40 euro per kWh (ex VAT)

[source,json]
----
include::examples/tariffrestriction_example_max_duration.json[]
----

Using this example: an EV charges for 40 minutes.
The first half hour: 5 kWh is charged, then the last 10 minutes: 1.2 kWh is charged

The cost will be:

- 5 kWh for free: 0.00 euro
- 1.2 kWh at 0.25/kWh: 0.30 euro

Total: 0.30 euro.


[[mod_tariffs_tariff_type]]
==== TariffType _enum_

[cols="3,10",options="header"]
|===
|Value |Description

|AD_HOC_PAYMENT |This tariff is valid when ad hoc payment is used at the Charge Point. Instead of an RFID token or APP.
|PROFILE_CHEAP |This tariff is valid when <<mod_sessions.asciidoc#mod_sessions_set_charging_preferences,Charging Preference>>: <<mod_sessions.asciidoc#mod_sessions_profile_type_enum,CHEAP>> is set on the session.
|PROFILE_FAST |This tariff is valid when <<mod_sessions.asciidoc#mod_sessions_set_charging_preferences,Charging Preference>>: <<mod_sessions.asciidoc#mod_sessions_profile_type_enum,FAST>> is set on the session.
|PROFILE_GREEN |This tariff is valid when <<mod_sessions.asciidoc#mod_sessions_set_charging_preferences,Charging Preference>>: <<mod_sessions.asciidoc#mod_sessions_profile_type_enum,GREEN>> is set on the session.
|REGULAR |This is the tariff when using an RFID, without any Charging Preference, or when <<mod_sessions.asciidoc#mod_sessions_set_charging_preferences,Charging Preference>>: <<mod_sessions.asciidoc#mod_sessions_profile_type_enum,REGULAR>> is set on the session.
|===
