:numbered:
[[mod_hub_client_info_module]]
== _HubClientInfo_ module

*Module Identifier: `hubclientinfo`*

*Data owner: `Hub`*

This module provides parties connected to a hub with the connection status of other parties that are connected to a hub that they can communicate with.
So, CPOs know which eMPS and other parties are online and vice versa.

It is like any other OCPI module, but then not between eMSP and CPO, but between eMSP/CPO and Hub.

=== Scenarios

This section will describe what the expected behavior is when a party receive information of a ConnectionState change.

==== Another Party becomes CONNECTED

Party is (back) online. Request can be send again.
Every party receiving Client Owned Object from this party should be prepared to received client owned objects with URLs
that contain the party_id and country_code of this party.

==== Another Party goes OFFLINE

Connection to party is not available: No requests can be send.
Do not queue push messages. When the other parties comes back online, it is their responsibility to do a GET to get back in sync.

==== Another Party becomes PLANNED

No requests can be send to this new party yet.
Might be a good idea to send some notification to an operator to get into contact with the new party so contracts can be setup.
This state may also be used when a Hub has some configuration indicating which parties have contracts which each other.
When a company does not have a connection configured.
This state may also be send to parties.

==== Another Party becomes SUSPENDED

Like with OFFLINE, no requests should be send to this party, they cannot be delivered.

When for example CDRs still have to be delivered, so there is some unfinished business,
parties are advised to get into contact with the other party in another way the OCPI: Call them, send an e-mail.


=== Still alive check.

The hubs needs to determine if a connection is still "alive".

To do this, the Hub should keep track of the time that has passed since the last message was received from a connected party.
When this is longer then 5 minutes (TODO determine the best time for a keep alive) the Hub should send a: GET to the Version information endpoint.
As the Version information endpoint is always required in OCPI,
and this endpoint is provided by all parties,
and a GET to the versions endpoint does not have any side effects, this is seen as the best way to do an "still-alive"check.

[[mod_hub_client_info_flow]]
=== Flow and Life-cycle

[[mod_hub_client_info_push_model]]
=== Push model

When the Hub creates a new ClientInfo object they push it to the connected parties by calling <<mod_hub_client_info_client_put,PUT>> 
on the connected party ClientInfo endpoint with the newly created ClientInfo object.

Any changes to ClientInfo in the Hub system are send to the connected party system by calling, either the <<mod_hub_client_info_client_put,PUT>> 
or the <<mod_hub_client_info_client_patch,PATCH>> on the connected party ClientInfo endpoint with the updated ClientInfo.

When the Hub invalidates a ClientInfo object (deleting is not possible), the Hub will send the updated ClientInfo object 
(with the field: status set to SUSPENDED, by calling, either the <<mod_hub_client_info_client_put,PUT>> or the <<mod_hub_client_info_client_patch,PATCH>> 
on the connected party ClientInfo endpoint with the updated ClientInfo object.

When the connected party is not sure about the state or existence of a ClientInfo object in the Hub system, the
connected party can call the <<mod_hub_client_info_hub_get,GET>> to request to ClientInfo object from the Hub system.

[[mod_hub_client_info_pull_model]]
=== Pull model

When a connected party is not sure about the state of the list of known connected parties of a Hub, or wants to request the full
list at the start-up of their system, the connected party can call the <<mod_hub_client_info_hub_get,GET>> on the Hubs ClientInfo endpoint to receive
all ClientInfo objects.
This method is not for operational flow.

=== Interfaces

There is both a Hub interface as a connected client (eMSP/CPO etc) interface for ClientInfo.
It is advised to use the push direction from Hub to connected clients during normal operation.
The Hub interface is meant to be used when the connected client is not 100% sure the ClientInfo cache is still correct.

[[mod_hub_client_info_client_interface]]
==== Connected client Interface

With this interface the Hub can push the ClientInfo information to a connected client (eMSP/CPO etc)
Example endpoint structure:
`/ocpi/cpo/2.0/clientinfo/{country_code}/{party_id}`

[cols="2,12",options="header"]
|===
|Method |Description

|<<mod_hub_client_info_client_get,GET>> |Retrieve a ClientInfo object as it is stored in the connected clients system.
|POST |n/a
|<<mod_hub_client_info_client_put,PUT>> |Push new/updated ClientInfo object to the connect client.
|<<mod_hub_client_info_client_patch,PATCH>> |Notify the connected client of partial updates to a ClientInfo object.
|DELETE |n/a, Use <<mod_hub_client_info_client_put,PUT>>, ClientInfo objects cannot be removed).
|===

[[mod_hub_client_info_client_get]]
===== *GET* Method

If the Hub wants to check the status of a ClientInfo object in the connected clients system it might
GET the object from the connected clients system for validation purposes. The Hub is the owner of the objects,
so it would be illogical if the connected client system had a different status or was missing an object.

====== Request Parameters

The following parameters can be provided as URL segments.

[cols="3,2,1,10",options="header"]
|===
|Parameter |Datatype |Required |Description

|country_code |<<types.asciidoc#types_cistring_type,CiString>>(2) |yes |Country code of the requested ClientInfo object.
|party_id |<<types.asciidoc#types_cistring_type,CiString>>(3) |yes |Party ID (Provider ID) of the requested ClientInfo object.
|===

====== Response Data

The response contains the requested object.

|===
|Type |Card. |Description

|<<mod_hub_client_info_hub_client_info_object,ClientInfo>> |1 |The requested ClientInfo object.
|===

[[mod_hub_client_info_client_put]]
===== *PUT* Method

New or updated ClientInfo objects are pushed from the Hub to a connected client.

====== Request Body

In the put request a the new or updated ClientInfo object is send.

|===
|Type |Card. |Description

|<<mod_hub_client_info_hub_client_info_object,ClientInfo>> |1 |New or updated ClientInfo object.
|===

====== Request Parameters

The following parameters can be provided as URL segments.

|===
|Parameter |Datatype |Required |Description

|country_code |<<types.asciidoc#types_cistring_type,CiString>>(2) |yes |Country code of the eMSP sending this PUT request to the CPO system.
|party_id |<<types.asciidoc#types_cistring_type,CiString>>(3) |yes |Party ID (Provider ID) of the eMSP sending this PUT request to the CPO system.
|===

====== Example: put a new ClientInfo object

[source,json]
----
PUT To URL: https://www.server.com/ocpi/cpo/2.0/clientinfo/NL/ALL

{
  "country_code": "NL",
  "party_id": "ALL",
  "role": "CPO",
  "status": "PLANNED",
}
----

[[mod_hub_client_info_client_patch]]
===== *PATCH* Method

Same as the <<mod_hub_client_info_client_put,PUT>> method, but only the fields/objects that have to be updated have to be present,
other fields/objects that are not specified are considered unchanged.

====== Example: invalidate a ClientInfo object

[source,json]
----
PATCH To URL: https://www.server.com/ocpi/cpo/2.0/clientinfo/NL/ALL

{
  "status": "SUSPENDED"
}
----

[[mod_hub_client_info_hub_interface]]
==== Hub Interface

This interface enables a connected party to request the current list of ClientInfo objects, when needed.

[cols="2,12",options="header"]
|===
|Method |Description

|<<mod_hub_client_info_hub_get,GET>> |Get the list of known ClientInfo objects, last updated between the {date_from}
and {date_to} <<transport_and_format.asciidoc#transport_and_format_pagination,paginated>>)
|POST |n/a
|PUT |n/a
|PATCH |n/a
|DELETE |n/a
|===

[[mod_hub_client_info_hub_get]]
===== *GET* Method

Fetch information about clients connected to a Hub.

Endpoint structure definition:

`{locations_endpoint_url}?[date_from={date_from}]&amp;[date_to={date_to}]&[offset={offset}]&[limit={limit}]`

Examples:

`+https://www.server.com/ocpi/cpo/2.2/hubclientinfo/?date_from=2019-01-28T12:00:00&date_to=2019-01-29T12:00:00+`

`+https://ocpi.server.com/2.2/hubclientinfo/?offset=50+`

`+https://www.server.com/ocpi/2.2/hubclientinfo/?date_from=2019-01-29T12:00:00&limit=100+`

`+https://www.server.com/ocpi/cpo/2.2/hubclientinfo/?offset=50&amp;limit=100+`


===== Request Parameters

If additional parameters: {date_from} and/or {date_to} are provided, only ClientInfo objects with (`last_updated`)
between the given date_from and date_to will be returned.

This request is <<transport_and_format.asciidoc#transport_and_format_pagination,paginated>>,
it supports the <<transport_and_format.asciidoc#transport_and_format_paginated_request,pagination>> related URL parameters.

[cols="3,2,1,10",options="header"]
|===
|Parameter |Datatype |Required |Description

|date_from |<<types.asciidoc#types_datetime_type,DateTime>> |no |Only return ClientInfo that have `last_updated` after this Date/Time.
|date_to |<<types.asciidoc#types_datetime_type,DateTime>> |no |Only return ClientInfo that have `last_updated` before this Date/Time.
|offset |int |no |The offset of the first object returned. Default is 0.
|limit |int |no |Maximum number of objects to GET.

|===

===== Response Data

The endpoint response with list of valid ClientInfo objects, the header will contain
the <<transport_and_format.asciidoc#transport_and_format_paginated_response,pagination>> related headers.

Any older information that is not specified in the response is considered as no longer valid.
Each object must contain all required fields. Fields that are not specified may be considered as null values.

|===
|Type |Card. |Description

|<<mod_hub_client_info_hub_client_info_object,ClientInfo>> |* |List of all (or matching) ClientInfo objects.
|===

==== Object description

[[mod_hub_client_info_hub_client_info_object]]
=== _ClientInfo_ Object

[cols="3,2,1,10",options="header"]
|===
|Property |Type |Card. |Description

|party_id |<<types.asciidoc#types_cistring_type,CiString>>(3) |1 |CPO or eMSP ID of this party. (following the 15118 ISO standard), as used in the credentials exchange.
|country_code |<<types.asciidoc#types_cistring_type,CiString>>(2) |1 |Country code of the country this party is operating in, as used in the credentials exchange.
|role |<<mod_hub_client_info_role_type_enum,RoleType>> |1 |The role of the connected party.
|status |<<mod_hub_client_info_hub_connection_type_enum,ConnectionStatusType>> |1 |Status of the connection to the party.
|last_updated |<<types.asciidoc#types_datetime_type,DateTime>> |1 |Timestamp when this ClientInfo object was last updated.
|===

== Data types

[[mod_hub_client_info_role_type_enum]]
=== RoleType _enum_

[cols="3,10",options="header"]
|===
|Value |Description

|CPO   |Charging Point Operator.
|EMPS  |e-Mobility Service Provider.
|NSP   |Navigation Service Provider, role like an eMSP (probably only interested in Location information)
|OTHER |Other role
|===

[[mod_hub_client_info_hub_connection_type_enum]]
=== ConnectionStatusType _enum_

[cols="3,10",options="header"]
|===
|Value |Description

|CONNECTED |Party is connected.
|OFFLINE   |Party is currently not connected.
|PLANNED   |Connection to this party is planned, but has never been connected.
|SUSPENDED |Party is now longer active, will never connect anymore.
|===


